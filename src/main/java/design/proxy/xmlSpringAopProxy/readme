使用XML配置Spring AOP切面

1.添加引用，需要引用一个新的jar包：aspectjweaver.jar，该包是AspectJ的组成部分。
 <dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.8.9</version>
 </dependency>

 2、定义通知
    该通知不再需要实现任何接口或继承抽象类，一个普通的bean即可，方法可以带一个JoinPoint连接点参数，用于获得连接点信息，如方法名，参数，代理对象等。
    Advices.java

3、通知的类型有多种，有些参数会不一样，特别是环绕通知，通知类型如下：
 //前置通知
 public void beforeMethod(JoinPoint joinPoint)

 //后置通知
 public void afterMethod(JoinPoint joinPoint)

 //返回值通知
 public void afterReturning(JoinPoint joinPoint, Object result)

 //抛出异常通知
 //在方法出现异常时会执行的代码可以访问到异常对象，可以指定在出现特定异常时在执行通知代码
 public void afterThrowing(JoinPoint joinPoint, Exception ex)

 //环绕通知
 //环绕通知需要携带ProceedingJoinPoint类型的参数
 //环绕通知类似于动态代理的全过程：ProceedingJoinPoint类型的参数可以决定是否执行目标方法。
 //而且环绕通知必须有返回值，返回值即为目标方法的返回值
 public Object aroundMethod(ProceedingJoinPoint pjd)

 4、配置IOC容器依赖的XML文件beansOfAOP.xml
 <?xml version="1.0" encoding="UTF-8"?>
 <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

     <!--被代理的目标对象 -->
     <bean id="math" class="design.proxy.xmlSpringAopProxy.Math"></bean>
     <!-- 通知 -->
     <bean id="advice" class="design.proxy.xmlSpringAopProxy.Advices"></bean>
     <!-- AOP配置 -->
     <!-- proxy-target-class属性表示被代理的类是否为一个没有实现接口的类，Spring会依据实现了接口则使用JDK内置的动态代理，如果未实现接口则使用cblib -->
     <aop:config proxy-target-class="true">
         <!-- 切面配置 -->
         <!--ref表示通知对象的引用 -->
         <aop:aspect ref="advice">
             <!-- 配置切入点(横切逻辑将注入的精确位置) -->
             <aop:pointcut expression="execution(* design.proxy.xmlSpringAopProxy.Math.*(..))" id="pointcut1"/>
             <!--声明通知，method指定通知类型，pointcut指定切点，就是该通知应该注入那些方法中 -->
             <aop:before method="before" pointcut-ref="pointcut1"/>
             <aop:after method="after" pointcut-ref="pointcut1"/>
         </aop:aspect>
     </aop:config>
 </beans>

 其中
 xmlns:aop="http://www.springframework.org/schema/aop"
 http://www.springframework.org/schema/aop
 http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
 是在原IOC内容中新增的，主要是为AOP服务，如果引入失败则没有智能提示。xmlns:是xml namespace的简写。xmlns:xsi：其xsd文件是xml需要遵守的规范，通过URL可以看到，是w3的统一规范，后面通过xsi:schemaLocation来定位所有的解析文件，这里只能成偶数对出现。

 <bean id="advice" class="design.proxy.xmlSpringAopProxy.Advices"></bean>表示通知bean，也就是横切逻辑bean。
 <aop:config proxy-target-class="true">用于AOP配置， proxy-target-class属性表示被代理的类是否为一个没有实现接口的类，Spring会依据实现了接口则使用JDK内置的动态代理，如果未实现接口则使用cblib；
 在Bean配置文件中，所有的Spring AOP配置都必须定义在<aop:config>元素内部。
 对于每个切面而言，都要创建一个<aop:aspect>元素来为具体的切面实现引用后端Bean实例。
 因此，切面Bean必须有一个标识符，供<aop:aspect>元素引用。
 aop:aspect表示切面配置， ref表示通知对象的引用；aop:pointcut是配置切入点，就是横切逻辑将注入的精确位置，那些包，类，方法需要拦截注入横切逻辑。
 aop:before用于声明通知，method指定通知类型，pointcut指定切点，就是该通知应该注入那些方法中。
 在aop Schema中，每种通知类型都对应一个特定地XML元素。通知元素需要pointcut-ref属性来引用切入点，或者用pointcut属性直接嵌入切入点表达式。method属性指定切面类中通知方法的名称。
 有如下几种：
 <!-- 前置通知 -->
 <aop:before method="before" pointcut-ref="pointcut1"/>
 <!-- 后置通知 -->
 <aop:after method="after" pointcut-ref="pointcut1"/>
 <!--环绕通知 -->
 <aop:around method="around" pointcut="execution(* com.zhangguo.Spring041.aop08.Math.s*(..))"/>
 <!--异常通知 -->
 <aop:after-throwing method="afterThrowing" pointcut="execution(* com.zhangguo.Spring041.aop08.Math.d*(..))"  throwing="exp"/>
 <!-- 返回值通知 -->
 <aop:after-returning method="afterReturning" pointcut="execution(* com.zhangguo.Spring041.aop08.Math.m*(..))" returning="result"/>

 4、获得代理对象